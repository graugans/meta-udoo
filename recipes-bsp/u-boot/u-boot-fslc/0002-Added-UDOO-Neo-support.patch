From 46a2cb22bfe7bf6e88b16ae546004ef15ddeebf1 Mon Sep 17 00:00:00 2001
From: Christian Ege <k4230r6@gmail.com>
Date: Fri, 30 Dec 2016 08:20:10 +0100
Subject: [PATCH 2/5] Added UDOO Neo support

This is a rebased version of the original patch from Francesco Montefoschi

Signed-off-by: Francesco Montefoschi <francesco.monte@gmail.com>
Signed-off-by: Christian Ege <k4230r6@gmail.com>
Signed-off-by: Drew Moseley <drew.moseley@mender.io>
---
 board/udoo/common/Makefile       |   7 ++
 board/udoo/common/trim.c         |  34 ++++++++
 board/udoo/common/trim.h         |  10 +++
 board/udoo/neo/detectboard.c     |  62 ++++++++++++++
 board/udoo/neo/detectboard.h     |  14 ++++
 board/udoo/neo/spl.c             | 175 +++++++++++++++++++++++++++++++++++++++
 board/udoo/quad_dual/Makefile    |   3 +-
 board/udoo/quad_dual/udoo.c      |  43 ++++------
 include/configs/udoo_quad_dual.h |   2 +-
 9 files changed, 319 insertions(+), 31 deletions(-)
 create mode 100644 board/udoo/common/Makefile
 create mode 100644 board/udoo/common/trim.c
 create mode 100644 board/udoo/common/trim.h
 create mode 100644 board/udoo/neo/detectboard.c
 create mode 100644 board/udoo/neo/detectboard.h
 create mode 100644 board/udoo/neo/spl.c

diff --git a/board/udoo/common/Makefile b/board/udoo/common/Makefile
new file mode 100644
index 0000000..0729cb8
--- /dev/null
+++ b/board/udoo/common/Makefile
@@ -0,0 +1,7 @@
+# (C) Copyright 2015 UDOO Team
+#
+# SPDX-License-Identifier:	GPL-2.0+
+#
+
+obj- := __dummy__.o
+obj-y  := trim.o
diff --git a/board/udoo/common/trim.c b/board/udoo/common/trim.c
new file mode 100644
index 0000000..61ce45a
--- /dev/null
+++ b/board/udoo/common/trim.c
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) UDOO Team
+ *
+ * Author: Francesco Montefoschi <francesco.monte@gmail.com>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+
+int isspace(char c)
+{
+	return (c == ' ' || c == '\t' || c == '\n' || c == '\r' || c == '\12');
+}
+
+char *trim(char *str)
+{
+	char *end;
+
+	// Trim leading space
+	while(isspace(*str)) str++;
+
+	if(*str == 0)  // All spaces?
+	return str;
+
+	// Trim trailing space
+	end = str + strlen(str) - 1;
+	while(end > str && isspace(*end)) end--;
+
+	// Write new null terminator
+	*(end+1) = 0;
+
+	return str;
+}
diff --git a/board/udoo/common/trim.h b/board/udoo/common/trim.h
new file mode 100644
index 0000000..795958c
--- /dev/null
+++ b/board/udoo/common/trim.h
@@ -0,0 +1,10 @@
+/*
+ * Copyright (C) UDOO Team
+ *
+ * Author: Francesco Montefoschi <francesco.monte@gmail.com>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+int isspace(char c);
+char *trim(char *str);
diff --git a/board/udoo/neo/detectboard.c b/board/udoo/neo/detectboard.c
new file mode 100644
index 0000000..b3a7294
--- /dev/null
+++ b/board/udoo/neo/detectboard.c
@@ -0,0 +1,62 @@
+/*
+ * Copyright (C) UDOO Team
+ *
+ * Author: Francesco Montefoschi <francesco.monte@gmail.com>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <asm/arch/mx6-pins.h>
+#include <asm/gpio.h>
+#include <asm/imx-common/iomux-v3.h>
+#include "detectboard.h"
+
+#define DIO_PAD_CTRL  (PAD_CTL_PKE | PAD_CTL_PUE |		\
+	PAD_CTL_PUS_100K_UP | PAD_CTL_SPEED_MED |		\
+	PAD_CTL_DSE_34ohm | PAD_CTL_HYS | PAD_CTL_SRE_FAST)
+#define DIO_PAD_CFG   (MUX_PAD_CTRL(DIO_PAD_CTRL) | MUX_MODE_SION)
+
+
+#define GPIO_R184 IMX_GPIO_NR(4, 13)
+#define GPIO_R185 IMX_GPIO_NR(4, 0)
+iomux_v3_cfg_t const board_recognition_pads[] = {
+    MX6_PAD_NAND_READY_B__GPIO4_IO_13 | DIO_PAD_CFG,  // Connected to R184
+    MX6_PAD_NAND_ALE__GPIO4_IO_0 | DIO_PAD_CFG,       // Connected to R185
+};
+
+/**
+ * Detects the board model by checking the R184 and R185 resistors.
+ * A mounted resistor (0Ohm) connects the GPIO to ground, so the
+ * GPIO value will be 0.
+ *
+ * FULL     - Eth, WiFi, motion sensors, 1GB RAM         -> R184 not mounted - R185 mounted
+ * EXTENDED - NO Eth, WiFi, motion sensors, 1GB RAM      -> R184 not mounted - R185 not mounted
+ * BASE     - Eth, NO WiFi, NO motion sensors, 512MB RAM -> R184 mounted     - R185 mounted
+ * BASE KS  - NO Eth, WiFi, NO motion sensors, 512MB RAM -> R184 mounted     - R185 not mounted
+ */
+int detect_board(void)
+{
+    imx_iomux_v3_setup_multiple_pads(board_recognition_pads,
+        ARRAY_SIZE(board_recognition_pads));
+
+    gpio_direction_input(GPIO_R184);
+    gpio_direction_input(GPIO_R185);
+
+    int r184 = gpio_get_value(GPIO_R184);
+    int r185 = gpio_get_value(GPIO_R185);
+
+    if (r184 == 0 && r185 == 0) {
+        return UDOO_NEO_TYPE_BASIC;
+    }
+    if (r184 == 0 && r185 == 1) {
+        return UDOO_NEO_TYPE_BASIC_KS;
+    }
+    if (r184 == 1 && r185 == 0) {
+        return UDOO_NEO_TYPE_FULL;
+    }
+    if (r184 == 1 && r185 == 1) {
+        return UDOO_NEO_TYPE_EXTENDED;
+    }
+
+    return UDOO_NEO_TYPE_FULL;
+}
\ No newline at end of file
diff --git a/board/udoo/neo/detectboard.h b/board/udoo/neo/detectboard.h
new file mode 100644
index 0000000..3cfa0c4
--- /dev/null
+++ b/board/udoo/neo/detectboard.h
@@ -0,0 +1,14 @@
+/*
+ * Copyright (C) UDOO Team
+ *
+ * Author: Francesco Montefoschi <francesco.monte@gmail.com>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#define UDOO_NEO_TYPE_BASIC         1
+#define UDOO_NEO_TYPE_BASIC_KS      2
+#define UDOO_NEO_TYPE_EXTENDED      3
+#define UDOO_NEO_TYPE_FULL          4
+
+int detect_board(void);
diff --git a/board/udoo/neo/spl.c b/board/udoo/neo/spl.c
new file mode 100644
index 0000000..e0e1b1c
--- /dev/null
+++ b/board/udoo/neo/spl.c
@@ -0,0 +1,175 @@
+/*
+ * Copyright (C) UDOO Team
+ *
+ * Author: Francesco Montefoschi <francesco.monte@gmail.com>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <asm/arch/clock.h>
+#include <asm/arch/crm_regs.h>
+#include <asm/arch/imx-regs.h>
+#include <asm/arch/sys_proto.h>
+#include <asm/io.h>
+#include <linux/sizes.h>
+#include <common.h>
+#include <libfdt.h>
+#include <spl.h>
+#include <asm/arch/mx6-ddr.h>
+#include "detectboard.h"
+
+const struct mx6sx_iomux_ddr_regs mx6_ddr_ioregs = {
+	.dram_dqm0 = 0x00000028,
+	.dram_dqm1 = 0x00000028,
+	.dram_dqm2 = 0x00000028,
+	.dram_dqm3 = 0x00000028,
+	.dram_ras = 0x00000020,
+	.dram_cas = 0x00000020,
+	.dram_odt0 = 0x00000020,
+	.dram_odt1 = 0x00000020,
+	.dram_sdba2 = 0x00000000,
+	.dram_sdcke0 = 0x00003000,
+	.dram_sdcke1 = 0x00003000,
+	.dram_sdclk_0 = 0x00000030,
+	.dram_sdqs0 = 0x00000028,
+	.dram_sdqs1 = 0x00000028,
+	.dram_sdqs2 = 0x00000028,
+	.dram_sdqs3 = 0x00000028,
+	.dram_reset = 0x00000020,
+};
+
+const struct mx6sx_iomux_grp_regs mx6_grp_ioregs = {
+	.grp_addds = 0x00000020,
+	.grp_ddrmode_ctl = 0x00020000,
+	.grp_ddrpke = 0x00000000,
+	.grp_ddrmode = 0x00020000,
+	.grp_b0ds = 0x00000028,
+	.grp_b1ds = 0x00000028,
+	.grp_ctlds = 0x00000020,
+	.grp_ddr_type = 0x000c0000,
+	.grp_b2ds = 0x00000028,
+	.grp_b3ds = 0x00000028,
+};
+
+const struct mx6_mmdc_calibration neo_mmcd_calib = {
+	.p0_mpwldectrl0 = 0x000E000B,
+	.p0_mpwldectrl1 = 0x000E0010,
+	.p0_mpdgctrl0 = 0x41600158,
+	.p0_mpdgctrl1 = 0x01500140,
+	.p0_mprddlctl = 0x3A383E3E,
+	.p0_mpwrdlctl = 0x3A383C38,
+};
+
+const struct mx6_mmdc_calibration neo_basic_mmcd_calib = {
+	.p0_mpwldectrl0 = 0x001E0022,
+	.p0_mpwldectrl1 = 0x001C0019,
+	.p0_mpdgctrl0 = 0x41540150,
+	.p0_mpdgctrl1 = 0x01440138,
+	.p0_mprddlctl = 0x403E4644,
+	.p0_mpwrdlctl = 0x3C3A4038,
+};
+
+/* MT41K256M16 */
+static struct mx6_ddr3_cfg neo_mem_ddr = {
+	.mem_speed = 1600,
+	.density = 4,
+	.width = 32,
+	.banks = 8,
+	.rowaddr = 15,
+	.coladdr = 10,
+	.pagesz = 2,
+	.trcd = 1375,
+	.trcmin = 4875,
+	.trasmin = 3500,
+};
+
+/* MT41K128M16 */
+static struct mx6_ddr3_cfg neo_basic_mem_ddr = {
+	.mem_speed = 1600,
+	.density = 2,
+	.width = 16,
+	.banks = 8,
+	.rowaddr = 14,
+	.coladdr = 10,
+	.pagesz = 2,
+	.trcd = 1375,
+	.trcmin = 4875,
+	.trasmin = 3500,
+};
+
+static void ccgr_init(void)
+{
+	struct mxc_ccm_reg *ccm = (struct mxc_ccm_reg *)CCM_BASE_ADDR;
+
+	writel(0xFFFFFFFF, &ccm->CCGR0);
+	writel(0xFFFFFFFF, &ccm->CCGR1);
+	writel(0xFFFFFFFF, &ccm->CCGR2);
+	writel(0xFFFFFFFF, &ccm->CCGR3);
+	writel(0xFFFFFFFF, &ccm->CCGR4);
+	writel(0xFFFFFFFF, &ccm->CCGR5);
+	writel(0xFFFFFFFF, &ccm->CCGR6);
+	writel(0xFFFFFFFF, &ccm->CCGR7);
+}
+
+static void spl_dram_init(void)
+{
+	int board = detect_board();
+
+	struct mx6_ddr_sysinfo sysinfo = {
+		.dsize = neo_mem_ddr.width/32,
+		.cs_density = 24,
+		.ncs = 1,
+		.cs1_mirror = 0,
+		.rtt_wr = 2,
+		.rtt_nom = 2,		/* RTT_Nom = RZQ/2 */
+		.walat = 1,		/* Write additional latency */
+		.ralat = 5,		/* Read additional latency */
+		.mif3_mode = 3,		/* Command prediction working mode */
+		.bi_on = 1,		/* Bank interleaving enabled */
+		.sde_to_rst = 0x10,	/* 14 cycles, 200us (JEDEC default) */
+		.rst_to_cke = 0x23,	/* 33 cycles, 500us (JEDEC default) */
+	};
+
+	if (board == UDOO_NEO_TYPE_BASIC || board == UDOO_NEO_TYPE_BASIC_KS) {
+		puts("Seting 512MB RAM calibration data\n");
+		mx6sx_dram_iocfg(neo_basic_mem_ddr.width, &mx6_ddr_ioregs, &mx6_grp_ioregs);
+		sysinfo.dsize = neo_basic_mem_ddr.width/32;
+		mx6_dram_cfg(&sysinfo, &neo_basic_mmcd_calib, &neo_basic_mem_ddr);
+		((struct mmdc_p_regs *)MX6_MMDC_P0_MDCTL)->mdctl = 0x83190000;
+	} else {
+		puts("Setting 1024MB RAM calibration data\n");
+		mx6sx_dram_iocfg(neo_mem_ddr.width, &mx6_ddr_ioregs, &mx6_grp_ioregs);
+		mx6_dram_cfg(&sysinfo, &neo_mmcd_calib, &neo_mem_ddr);
+		((struct mmdc_p_regs *)MX6_MMDC_P0_MDCTL)->mdctl = 0x84190000;
+	}
+}
+
+void board_init_f(ulong dummy)
+{
+	/* setup AIPS and disable watchdog */
+	arch_cpu_init();
+
+	ccgr_init();
+
+	/* iomux and setup of i2c */
+	board_early_init_f();
+
+	/* setup GP timer */
+	timer_init();
+
+	/* UART clocks enabled and gd valid - init serial console */
+	preloader_console_init();
+
+	/* DDR initialization */
+	spl_dram_init();
+
+	/* Clear the BSS. */
+	memset(__bss_start, 0, __bss_end - __bss_start);
+
+	/* load/boot image from boot device */
+	board_init_r(NULL, 0);
+}
+
+void reset_cpu(ulong addr)
+{
+}
diff --git a/board/udoo/quad_dual/Makefile b/board/udoo/quad_dual/Makefile
index 1d6d9f8..18f5bf9 100644
--- a/board/udoo/quad_dual/Makefile
+++ b/board/udoo/quad_dual/Makefile
@@ -4,4 +4,5 @@
 # SPDX-License-Identifier:	GPL-2.0+
 #
 
-obj-y  := udoo.o udoo_spl.o
+obj-y  := udoo.o
+obj-$(CONFIG_SPL_BUILD)  += udoo_spl.o
diff --git a/board/udoo/quad_dual/udoo.c b/board/udoo/quad_dual/udoo.c
index 8773985..50a2dc6 100644
--- a/board/udoo/quad_dual/udoo.c
+++ b/board/udoo/quad_dual/udoo.c
@@ -24,6 +24,7 @@
 #include <micrel.h>
 #include <miiphy.h>
 #include <netdev.h>
+#include "../common/trim.h"
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -282,31 +283,6 @@ int checkboard(void)
 	return 0;
 }
 
-
-int isspace(char c)
-{
-	return (c == ' ' || c == '\t' || c == '\n' || c == '\r' || c == '\12');
-}
-char *trim(char *str)
-{
-	char *end;
-
-	// Trim leading space
-	while(isspace(*str)) str++;
-
-	if(*str == 0)  // All spaces?
-	return str;
-
-	// Trim trailing space
-	end = str + strlen(str) - 1;
-	while(end > str && isspace(*end)) end--;
-
-	// Write new null terminator
-	*(end+1) = 0;
-
-	return str;
-}
-
 /**
  * After loading uEnv.txt, we autodetect which fdt file we need to load.
  * uEnv.txt can contain:
@@ -339,17 +315,26 @@ int do_udooinit(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
 		}
 	}
 
-	char* dir_part = "dts";
+	char* actual_fdt = getenv("fdt_file");
+	if (actual_fdt) {
+		actual_fdt = trim(actual_fdt);
+		if (strcmp(actual_fdt, "autodetect") != 0) {
+			// if fdt_file is already set, do not overwrite it!
+			return 0;
+		}
+	}
+
+	char fdt_file[100];
 	char* customdtb = getenv("use_custom_dtb");
+	sprintf(fdt_file, "/boot/%s%s.dtb", modelfdt, video_part);
 	if (customdtb) {
 		customdtb = trim(customdtb);
 		if (strcmp(customdtb, "true") == 0 || strcmp(customdtb, "yes") == 0 || strcmp(customdtb, "enabled") == 0) {
-			dir_part = "dts-overlay";
+			char* dir_part = "dts-overlay";
+			sprintf(fdt_file, "/boot/%s/%s%s.dtb", dir_part, modelfdt, video_part);
 		}
 	}
 
-	char fdt_file[100];
-	sprintf(fdt_file, "/boot/%s/%s%s.dtb", dir_part, modelfdt, video_part);
 
 	printf("Device Tree: %s\n", fdt_file);
 	setenv("fdt_file", fdt_file);
diff --git a/include/configs/udoo_quad_dual.h b/include/configs/udoo_quad_dual.h
index d9deef5..c532639 100644
--- a/include/configs/udoo_quad_dual.h
+++ b/include/configs/udoo_quad_dual.h
@@ -81,7 +81,7 @@
 	"splashpos=m,m\0" \
 	"fdt_high=0xffffffff\0" \
 	"initrd_high=0xffffffff\0" \
-	"fdt_file=undefined\0" \
+	"fdt_file=autodetect\0" \
 	"fdt_addr=0x18000000\0" \
 	"boot_fdt=try\0" \
 	"ip_dyn=yes\0" \
-- 
2.7.4

